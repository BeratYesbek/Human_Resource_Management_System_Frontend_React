{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar isNil_1 = __importDefault(require(\"lodash/isNil\"));\n\nvar isArray_1 = __importDefault(require(\"lodash/isArray\"));\n\nvar isString_1 = __importDefault(require(\"lodash/isString\"));\n\nvar compact_1 = __importDefault(require(\"lodash/compact\"));\n\nvar moment_1 = __importDefault(require(\"moment\"));\n\nexports.TIME_FORMAT = {\n  24: 'HH:mm',\n  AMPM: 'hh:mm A',\n  ampm: 'hh:mm a'\n};\n/** Parse string, moment, Date.\n *\n * Return unedfined on invalid input.\n */\n\nfunction parseValue(value, dateFormat, localization) {\n  if (!isNil_1.default(value) && !isNil_1.default(dateFormat)) {\n    var date = moment_1.default(value, dateFormat);\n\n    if (date.isValid()) {\n      date.locale(localization);\n      return date;\n    }\n  }\n}\n\nexports.parseValue = parseValue;\n/** Parse string, moment, Date, string[], moment[], Date[].\n *\n * Return array of moments. Returned value contains only valid moments.\n * Return undefined if none of the input values are valid.\n */\n\nfunction parseArrayOrValue(data, dateFormat, localization) {\n  if (isArray_1.default(data)) {\n    var parsed = compact_1.default(data.map(function (item) {\n      return parseValue(item, dateFormat, localization);\n    }));\n\n    if (parsed.length > 0) {\n      return parsed;\n    }\n  }\n\n  var parsedValue = parseValue(data, dateFormat, localization);\n  return parsedValue && [parsedValue];\n}\n\nexports.parseArrayOrValue = parseArrayOrValue;\n/** Create moment.\n *\n * Creates moment using `dateParams` or `initialDate` arguments (if provided).\n * Precedense order: dateParams -> initialDate -> default value\n */\n\nfunction getInitializer(context) {\n  var dateParams = context.dateParams,\n      initialDate = context.initialDate,\n      dateFormat = context.dateFormat,\n      localization = context.localization;\n\n  if (dateParams) {\n    var parsedParams = localization ? moment_1.default(dateParams).locale(localization) : moment_1.default(dateParams);\n\n    if (parsedParams.isValid()) {\n      return parsedParams;\n    }\n  }\n\n  var parsedInitialDate = parseValue(initialDate, dateFormat, localization);\n\n  if (parsedInitialDate) {\n    return parsedInitialDate;\n  }\n\n  return localization ? moment_1.default().locale(localization) : moment_1.default();\n}\n\nexports.getInitializer = getInitializer;\n/** Creates moment instance from provided value or initialDate.\n *  Creates today by default.\n */\n\nfunction buildValue(value, initialDate, localization, dateFormat, defaultVal) {\n  if (defaultVal === void 0) {\n    defaultVal = moment_1.default();\n  }\n\n  var valueParsed = parseValue(value, dateFormat, localization);\n\n  if (valueParsed) {\n    return valueParsed;\n  }\n\n  var initialDateParsed = parseValue(initialDate, dateFormat, localization);\n\n  if (initialDateParsed) {\n    return initialDateParsed;\n  }\n\n  var _defaultVal = defaultVal ? defaultVal.clone() : defaultVal;\n\n  if (_defaultVal) {\n    _defaultVal.locale(localization);\n  }\n\n  return _defaultVal;\n}\n\nexports.buildValue = buildValue;\n\nfunction dateValueToString(value, dateFormat, locale) {\n  if (isString_1.default(value)) {\n    return value;\n  }\n\n  if (moment_1.default.isMoment(value)) {\n    var _value = value.clone();\n\n    _value.locale(locale);\n\n    return _value.format(dateFormat);\n  }\n\n  var date = moment_1.default(value, dateFormat);\n\n  if (date.isValid()) {\n    date.locale(locale);\n    return date.format(dateFormat);\n  }\n\n  return '';\n}\n\nexports.dateValueToString = dateValueToString;\n\nfunction cleanDate(inputString, dateFormat) {\n  var formattedDateLength = moment_1.default().format(dateFormat).length;\n  return inputString.trim().slice(0, formattedDateLength);\n}\n/**\n * Extract start and end dates from input string.\n * Return { start: Moment|undefined, end: Moment|undefined }\n * @param {string} inputString Row input string from user\n * @param {string} dateFormat Moment formatting string\n * @param {string} inputSeparator Separator for split inputString\n */\n\n\nfunction parseDatesRange(inputString, dateFormat, inputSeparator) {\n  if (inputString === void 0) {\n    inputString = '';\n  }\n\n  if (dateFormat === void 0) {\n    dateFormat = '';\n  }\n\n  if (inputSeparator === void 0) {\n    inputSeparator = ' - ';\n  }\n\n  var dates = inputString.split(inputSeparator).map(function (date) {\n    return cleanDate(date, dateFormat);\n  });\n  var result = {};\n  var start;\n  var end;\n  start = moment_1.default(dates[0], dateFormat);\n\n  if (dates.length === 2) {\n    end = moment_1.default(dates[1], dateFormat);\n  }\n\n  if (start && start.isValid()) {\n    result.start = start;\n  }\n\n  if (end && end.isValid()) {\n    result.end = end;\n  }\n\n  return result;\n}\n\nexports.parseDatesRange = parseDatesRange;","map":{"version":3,"sources":["C:/Users/berat/Documents/MyProjects/Human_Resource_Management_System_Frontend_React-main/react-app/node_modules/semantic-ui-calendar-react/dist/commonjs/inputs/parse.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","isNil_1","require","isArray_1","isString_1","compact_1","moment_1","TIME_FORMAT","AMPM","ampm","parseValue","dateFormat","localization","default","date","isValid","locale","parseArrayOrValue","data","parsed","map","item","length","parsedValue","getInitializer","context","dateParams","initialDate","parsedParams","parsedInitialDate","buildValue","defaultVal","valueParsed","initialDateParsed","_defaultVal","clone","dateValueToString","isMoment","_value","format","cleanDate","inputString","formattedDateLength","trim","slice","parseDatesRange","inputSeparator","dates","split","result","start","end"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar isNil_1 = __importDefault(require(\"lodash/isNil\"));\nvar isArray_1 = __importDefault(require(\"lodash/isArray\"));\nvar isString_1 = __importDefault(require(\"lodash/isString\"));\nvar compact_1 = __importDefault(require(\"lodash/compact\"));\nvar moment_1 = __importDefault(require(\"moment\"));\nexports.TIME_FORMAT = {\n    24: 'HH:mm',\n    AMPM: 'hh:mm A',\n    ampm: 'hh:mm a',\n};\n/** Parse string, moment, Date.\n *\n * Return unedfined on invalid input.\n */\nfunction parseValue(value, dateFormat, localization) {\n    if (!isNil_1.default(value) && !isNil_1.default(dateFormat)) {\n        var date = moment_1.default(value, dateFormat);\n        if (date.isValid()) {\n            date.locale(localization);\n            return date;\n        }\n    }\n}\nexports.parseValue = parseValue;\n/** Parse string, moment, Date, string[], moment[], Date[].\n *\n * Return array of moments. Returned value contains only valid moments.\n * Return undefined if none of the input values are valid.\n */\nfunction parseArrayOrValue(data, dateFormat, localization) {\n    if (isArray_1.default(data)) {\n        var parsed = compact_1.default(data.map(function (item) { return parseValue(item, dateFormat, localization); }));\n        if (parsed.length > 0) {\n            return parsed;\n        }\n    }\n    var parsedValue = parseValue(data, dateFormat, localization);\n    return parsedValue && [parsedValue];\n}\nexports.parseArrayOrValue = parseArrayOrValue;\n/** Create moment.\n *\n * Creates moment using `dateParams` or `initialDate` arguments (if provided).\n * Precedense order: dateParams -> initialDate -> default value\n */\nfunction getInitializer(context) {\n    var dateParams = context.dateParams, initialDate = context.initialDate, dateFormat = context.dateFormat, localization = context.localization;\n    if (dateParams) {\n        var parsedParams = localization ? moment_1.default(dateParams).locale(localization) : moment_1.default(dateParams);\n        if (parsedParams.isValid()) {\n            return parsedParams;\n        }\n    }\n    var parsedInitialDate = parseValue(initialDate, dateFormat, localization);\n    if (parsedInitialDate) {\n        return parsedInitialDate;\n    }\n    return localization ? moment_1.default().locale(localization) : moment_1.default();\n}\nexports.getInitializer = getInitializer;\n/** Creates moment instance from provided value or initialDate.\n *  Creates today by default.\n */\nfunction buildValue(value, initialDate, localization, dateFormat, defaultVal) {\n    if (defaultVal === void 0) { defaultVal = moment_1.default(); }\n    var valueParsed = parseValue(value, dateFormat, localization);\n    if (valueParsed) {\n        return valueParsed;\n    }\n    var initialDateParsed = parseValue(initialDate, dateFormat, localization);\n    if (initialDateParsed) {\n        return initialDateParsed;\n    }\n    var _defaultVal = defaultVal ? defaultVal.clone() : defaultVal;\n    if (_defaultVal) {\n        _defaultVal.locale(localization);\n    }\n    return _defaultVal;\n}\nexports.buildValue = buildValue;\nfunction dateValueToString(value, dateFormat, locale) {\n    if (isString_1.default(value)) {\n        return value;\n    }\n    if (moment_1.default.isMoment(value)) {\n        var _value = value.clone();\n        _value.locale(locale);\n        return _value.format(dateFormat);\n    }\n    var date = moment_1.default(value, dateFormat);\n    if (date.isValid()) {\n        date.locale(locale);\n        return date.format(dateFormat);\n    }\n    return '';\n}\nexports.dateValueToString = dateValueToString;\nfunction cleanDate(inputString, dateFormat) {\n    var formattedDateLength = moment_1.default().format(dateFormat).length;\n    return inputString.trim().slice(0, formattedDateLength);\n}\n/**\n * Extract start and end dates from input string.\n * Return { start: Moment|undefined, end: Moment|undefined }\n * @param {string} inputString Row input string from user\n * @param {string} dateFormat Moment formatting string\n * @param {string} inputSeparator Separator for split inputString\n */\nfunction parseDatesRange(inputString, dateFormat, inputSeparator) {\n    if (inputString === void 0) { inputString = ''; }\n    if (dateFormat === void 0) { dateFormat = ''; }\n    if (inputSeparator === void 0) { inputSeparator = ' - '; }\n    var dates = inputString.split(inputSeparator)\n        .map(function (date) { return cleanDate(date, dateFormat); });\n    var result = {};\n    var start;\n    var end;\n    start = moment_1.default(dates[0], dateFormat);\n    if (dates.length === 2) {\n        end = moment_1.default(dates[1], dateFormat);\n    }\n    if (start && start.isValid()) {\n        result.start = start;\n    }\n    if (end && end.isValid()) {\n        result.end = end;\n    }\n    return result;\n}\nexports.parseDatesRange = parseDatesRange;\n"]},"metadata":{},"sourceType":"script"}